name: gha-supported-versions-parser
description: |
  @TODO
#branding: # @TODO
#  icon: tag
#  color: yellow

inputs:
  path:
    description: Path to the supported versions file
    required: true
  ref:
    description: Reference to fetch
    required: false
    default: "${{ github.ref }}"
  dependency:
    description: Dependency name to fetch
    required: true
  fetch-dir:
    description: Directory where to fetch the supported version file
    required: false
    default: '${{ runner.temp }}'

outputs:
  min:
    description: Minimal version configured for the given dependency
    value: ${{ steps.parse-versions.outputs.min }}
  max:
    description: Maximal version configured for the given dependency
    value: ${{ steps.parse-versions.outputs.max }}
  next:
    description: Next version configured for the given dependency
    value: ${{ steps.parse-versions.outputs.next }}

runs:
  using: composite
  steps:
    # Even if an input is marked as "required", empty/no value may be passed !
    - shell: bash
      run: |
        # Validate provided inputs ...

        if [[ -z "${{ inputs.dependency }}" ]]; then
          echo '::error::You must provide a dependency !'
          exit 1
        elif [[ -z "${{ inputs.path }}" ]]; then
          echo '::error::You must provide a path !'
          exit 1
        elif [[ -z "${{ inputs.ref }}" ]]; then
          echo '::error::Ref is invalid !'
          exit 1
        elif [[ -z "${{ inputs.fetch-dir }}" ]]; then
          echo '::error::Fetch directory is invalid !'
          exit 1
        fi

    - name: Download supported version file
      shell: bash
      run: |
        # Download supported versions file ...

        mkdir -p '${{ inputs.fetch-dir }}' && \
        curl --silent --show-error 'https://raw.githubusercontent.com/${{ github.repository }}/${{ inputs.ref }}/${{ inputs.path }}' > '${{ inputs.fetch-dir }}/supported-versions.json'

    - id: parse-versions
      shell: bash
      run: |
        # Parse ${{ inputs.dependency }} versions ...

        # Lowest version to assess (e.g Lowest supported version including security support)
        MIN=$( jq -r '.${{ inputs.dependency }}.min' '${{ inputs.fetch-dir }}/supported-versions.json' )
        echo "Min ${{ inputs.dependency }} version: $MIN"
        echo "min=$MIN" >> $GITHUB_OUTPUT
        # Highest version to assess (e.g Highest supported version)
        MAX=$( jq -r '.${{ inputs.dependency }}.max' '${{ inputs.fetch-dir }}/supported-versions.json' )
        echo "Max ${{ inputs.dependency }} version: $MAX"
        echo "max=$MAX" >> $GITHUB_OUTPUT
        # Next (currently not supported) version to assess (e.g Current dev version)
        NEXT=$( jq -r '.${{ inputs.dependency }}.next' '${{ inputs.fetch-dir }}/supported-versions.json' )
        echo "Next ${{ inputs.dependency }} version: $NEXT"
        echo "next=$NEXT" >> $GITHUB_OUTPUT

    - uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          await core.summary
            .addHeading('Supported ${{ inputs.dependency }} versions')
            .addTable([
              [
                {data: 'Min â†¦', header: true},
                {data: 'â†¤ Max', header: true},
                {data: 'ðŸ”¬ Next', header: true}
              ],
              [
                '${{ steps.parse-versions.outputs.min }}',
                '${{ steps.parse-versions.outputs.max }}',
                '${{ steps.parse-versions.outputs.next }}'
              ]
            ])
            .write()
          ;
